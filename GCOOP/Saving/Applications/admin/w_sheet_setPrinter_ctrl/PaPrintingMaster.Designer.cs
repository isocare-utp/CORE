//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Saving.Applications.admin.w_sheet_setPrinter_ctrl {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PaPrintingMaster")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PaPrintingMaster : global::System.Data.DataSet {
        
        private PAPRINTINGMASTERDataTable tablePAPRINTINGMASTER;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PaPrintingMaster() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected PaPrintingMaster(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PAPRINTINGMASTER"] != null)) {
                    base.Tables.Add(new PAPRINTINGMASTERDataTable(ds.Tables["PAPRINTINGMASTER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PAPRINTINGMASTERDataTable PAPRINTINGMASTER {
            get {
                return this.tablePAPRINTINGMASTER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            PaPrintingMaster cln = ((PaPrintingMaster)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PAPRINTINGMASTER"] != null)) {
                    base.Tables.Add(new PAPRINTINGMASTERDataTable(ds.Tables["PAPRINTINGMASTER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablePAPRINTINGMASTER = ((PAPRINTINGMASTERDataTable)(base.Tables["PAPRINTINGMASTER"]));
            if ((initTable == true)) {
                if ((this.tablePAPRINTINGMASTER != null)) {
                    this.tablePAPRINTINGMASTER.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "PaPrintingMaster";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PaPrintingMaster.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePAPRINTINGMASTER = new PAPRINTINGMASTERDataTable();
            base.Tables.Add(this.tablePAPRINTINGMASTER);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePAPRINTINGMASTER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PaPrintingMaster ds = new PaPrintingMaster();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PAPRINTINGMASTERRowChangeEventHandler(object sender, PAPRINTINGMASTERRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PAPRINTINGMASTERDataTable : global::System.Data.TypedTableBase<PAPRINTINGMASTERRow> {
            
            private global::System.Data.DataColumn columnPRINTING_NAME;
            
            private global::System.Data.DataColumn columnPRINTING_DESC;
            
            private global::System.Data.DataColumn columnPRIMARY_COLUMN;
            
            private global::System.Data.DataColumn columnROW_PERPAGE;
            
            private global::System.Data.DataColumn columnAUTO_PRINT;
            
            private global::System.Data.DataColumn columnAUTO_CLOSE;
            
            private global::System.Data.DataColumn columnPRINTER_NAMES;
            
            private global::System.Data.DataColumn columnPAPER_SIZE;
            
            private global::System.Data.DataColumn columnFONT_SIZE;
            
            private global::System.Data.DataColumn columnFONT_NAME;
            
            private global::System.Data.DataColumn columnFONT_COLOR;
            
            private global::System.Data.DataColumn columnFONT_BIUS;
            
            private global::System.Data.DataColumn columnHEAD_HEIGHT;
            
            private global::System.Data.DataColumn columnDETAIL_HEIGHT;
            
            private global::System.Data.DataColumn columnTEST_WIDTH;
            
            private global::System.Data.DataColumn columnTEST_HEIGHT;
            
            private global::System.Data.DataColumn columnURL_XMLTEST;
            
            private global::System.Data.DataColumn columnORIENTATION;
            
            private global::System.Data.DataColumn columnDATAWINDOW;
            
            private global::System.Data.DataColumn columnPAPERSIZE;
            
            private global::System.Data.DataColumn columnPAPER_HEIGHT;
            
            private global::System.Data.DataColumn columnPAPER_WIDTH;
            
            private global::System.Data.DataColumn columnMARGIN_FLAG;
            
            private global::System.Data.DataColumn columnMARGIN_TOP;
            
            private global::System.Data.DataColumn columnMARGIN_BOTTOM;
            
            private global::System.Data.DataColumn columnMARGIN_LEFT;
            
            private global::System.Data.DataColumn columnMARGIN_RIGHT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERDataTable() {
                this.TableName = "PAPRINTINGMASTER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PAPRINTINGMASTERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PAPRINTINGMASTERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRINTING_NAMEColumn {
                get {
                    return this.columnPRINTING_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRINTING_DESCColumn {
                get {
                    return this.columnPRINTING_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRIMARY_COLUMNColumn {
                get {
                    return this.columnPRIMARY_COLUMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ROW_PERPAGEColumn {
                get {
                    return this.columnROW_PERPAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AUTO_PRINTColumn {
                get {
                    return this.columnAUTO_PRINT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AUTO_CLOSEColumn {
                get {
                    return this.columnAUTO_CLOSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRINTER_NAMESColumn {
                get {
                    return this.columnPRINTER_NAMES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAPER_SIZEColumn {
                get {
                    return this.columnPAPER_SIZE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FONT_SIZEColumn {
                get {
                    return this.columnFONT_SIZE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FONT_NAMEColumn {
                get {
                    return this.columnFONT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FONT_COLORColumn {
                get {
                    return this.columnFONT_COLOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FONT_BIUSColumn {
                get {
                    return this.columnFONT_BIUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HEAD_HEIGHTColumn {
                get {
                    return this.columnHEAD_HEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DETAIL_HEIGHTColumn {
                get {
                    return this.columnDETAIL_HEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEST_WIDTHColumn {
                get {
                    return this.columnTEST_WIDTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEST_HEIGHTColumn {
                get {
                    return this.columnTEST_HEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn URL_XMLTESTColumn {
                get {
                    return this.columnURL_XMLTEST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ORIENTATIONColumn {
                get {
                    return this.columnORIENTATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DATAWINDOWColumn {
                get {
                    return this.columnDATAWINDOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAPERSIZEColumn {
                get {
                    return this.columnPAPERSIZE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAPER_HEIGHTColumn {
                get {
                    return this.columnPAPER_HEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PAPER_WIDTHColumn {
                get {
                    return this.columnPAPER_WIDTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MARGIN_FLAGColumn {
                get {
                    return this.columnMARGIN_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MARGIN_TOPColumn {
                get {
                    return this.columnMARGIN_TOP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MARGIN_BOTTOMColumn {
                get {
                    return this.columnMARGIN_BOTTOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MARGIN_LEFTColumn {
                get {
                    return this.columnMARGIN_LEFT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MARGIN_RIGHTColumn {
                get {
                    return this.columnMARGIN_RIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERRow this[int index] {
                get {
                    return ((PAPRINTINGMASTERRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAPRINTINGMASTERRowChangeEventHandler PAPRINTINGMASTERRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAPRINTINGMASTERRowChangeEventHandler PAPRINTINGMASTERRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAPRINTINGMASTERRowChangeEventHandler PAPRINTINGMASTERRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PAPRINTINGMASTERRowChangeEventHandler PAPRINTINGMASTERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPAPRINTINGMASTERRow(PAPRINTINGMASTERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERRow AddPAPRINTINGMASTERRow(
                        string PRINTING_NAME, 
                        string PRINTING_DESC, 
                        string PRIMARY_COLUMN, 
                        decimal ROW_PERPAGE, 
                        decimal AUTO_PRINT, 
                        decimal AUTO_CLOSE, 
                        string PRINTER_NAMES, 
                        string PAPER_SIZE, 
                        decimal FONT_SIZE, 
                        string FONT_NAME, 
                        string FONT_COLOR, 
                        string FONT_BIUS, 
                        decimal HEAD_HEIGHT, 
                        decimal DETAIL_HEIGHT, 
                        decimal TEST_WIDTH, 
                        decimal TEST_HEIGHT, 
                        string URL_XMLTEST, 
                        decimal ORIENTATION, 
                        string DATAWINDOW, 
                        decimal PAPERSIZE, 
                        decimal PAPER_HEIGHT, 
                        decimal PAPER_WIDTH, 
                        decimal MARGIN_FLAG, 
                        decimal MARGIN_TOP, 
                        decimal MARGIN_BOTTOM, 
                        decimal MARGIN_LEFT, 
                        decimal MARGIN_RIGHT) {
                PAPRINTINGMASTERRow rowPAPRINTINGMASTERRow = ((PAPRINTINGMASTERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PRINTING_NAME,
                        PRINTING_DESC,
                        PRIMARY_COLUMN,
                        ROW_PERPAGE,
                        AUTO_PRINT,
                        AUTO_CLOSE,
                        PRINTER_NAMES,
                        PAPER_SIZE,
                        FONT_SIZE,
                        FONT_NAME,
                        FONT_COLOR,
                        FONT_BIUS,
                        HEAD_HEIGHT,
                        DETAIL_HEIGHT,
                        TEST_WIDTH,
                        TEST_HEIGHT,
                        URL_XMLTEST,
                        ORIENTATION,
                        DATAWINDOW,
                        PAPERSIZE,
                        PAPER_HEIGHT,
                        PAPER_WIDTH,
                        MARGIN_FLAG,
                        MARGIN_TOP,
                        MARGIN_BOTTOM,
                        MARGIN_LEFT,
                        MARGIN_RIGHT};
                rowPAPRINTINGMASTERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPAPRINTINGMASTERRow);
                return rowPAPRINTINGMASTERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERRow FindByPRINTING_NAME(string PRINTING_NAME) {
                return ((PAPRINTINGMASTERRow)(this.Rows.Find(new object[] {
                            PRINTING_NAME})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PAPRINTINGMASTERDataTable cln = ((PAPRINTINGMASTERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PAPRINTINGMASTERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnPRINTING_NAME = base.Columns["PRINTING_NAME"];
                this.columnPRINTING_DESC = base.Columns["PRINTING_DESC"];
                this.columnPRIMARY_COLUMN = base.Columns["PRIMARY_COLUMN"];
                this.columnROW_PERPAGE = base.Columns["ROW_PERPAGE"];
                this.columnAUTO_PRINT = base.Columns["AUTO_PRINT"];
                this.columnAUTO_CLOSE = base.Columns["AUTO_CLOSE"];
                this.columnPRINTER_NAMES = base.Columns["PRINTER_NAMES"];
                this.columnPAPER_SIZE = base.Columns["PAPER_SIZE"];
                this.columnFONT_SIZE = base.Columns["FONT_SIZE"];
                this.columnFONT_NAME = base.Columns["FONT_NAME"];
                this.columnFONT_COLOR = base.Columns["FONT_COLOR"];
                this.columnFONT_BIUS = base.Columns["FONT_BIUS"];
                this.columnHEAD_HEIGHT = base.Columns["HEAD_HEIGHT"];
                this.columnDETAIL_HEIGHT = base.Columns["DETAIL_HEIGHT"];
                this.columnTEST_WIDTH = base.Columns["TEST_WIDTH"];
                this.columnTEST_HEIGHT = base.Columns["TEST_HEIGHT"];
                this.columnURL_XMLTEST = base.Columns["URL_XMLTEST"];
                this.columnORIENTATION = base.Columns["ORIENTATION"];
                this.columnDATAWINDOW = base.Columns["DATAWINDOW"];
                this.columnPAPERSIZE = base.Columns["PAPERSIZE"];
                this.columnPAPER_HEIGHT = base.Columns["PAPER_HEIGHT"];
                this.columnPAPER_WIDTH = base.Columns["PAPER_WIDTH"];
                this.columnMARGIN_FLAG = base.Columns["MARGIN_FLAG"];
                this.columnMARGIN_TOP = base.Columns["MARGIN_TOP"];
                this.columnMARGIN_BOTTOM = base.Columns["MARGIN_BOTTOM"];
                this.columnMARGIN_LEFT = base.Columns["MARGIN_LEFT"];
                this.columnMARGIN_RIGHT = base.Columns["MARGIN_RIGHT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnPRINTING_NAME = new global::System.Data.DataColumn("PRINTING_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINTING_NAME);
                this.columnPRINTING_DESC = new global::System.Data.DataColumn("PRINTING_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINTING_DESC);
                this.columnPRIMARY_COLUMN = new global::System.Data.DataColumn("PRIMARY_COLUMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIMARY_COLUMN);
                this.columnROW_PERPAGE = new global::System.Data.DataColumn("ROW_PERPAGE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROW_PERPAGE);
                this.columnAUTO_PRINT = new global::System.Data.DataColumn("AUTO_PRINT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTO_PRINT);
                this.columnAUTO_CLOSE = new global::System.Data.DataColumn("AUTO_CLOSE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTO_CLOSE);
                this.columnPRINTER_NAMES = new global::System.Data.DataColumn("PRINTER_NAMES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINTER_NAMES);
                this.columnPAPER_SIZE = new global::System.Data.DataColumn("PAPER_SIZE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAPER_SIZE);
                this.columnFONT_SIZE = new global::System.Data.DataColumn("FONT_SIZE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFONT_SIZE);
                this.columnFONT_NAME = new global::System.Data.DataColumn("FONT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFONT_NAME);
                this.columnFONT_COLOR = new global::System.Data.DataColumn("FONT_COLOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFONT_COLOR);
                this.columnFONT_BIUS = new global::System.Data.DataColumn("FONT_BIUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFONT_BIUS);
                this.columnHEAD_HEIGHT = new global::System.Data.DataColumn("HEAD_HEIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHEAD_HEIGHT);
                this.columnDETAIL_HEIGHT = new global::System.Data.DataColumn("DETAIL_HEIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETAIL_HEIGHT);
                this.columnTEST_WIDTH = new global::System.Data.DataColumn("TEST_WIDTH", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEST_WIDTH);
                this.columnTEST_HEIGHT = new global::System.Data.DataColumn("TEST_HEIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEST_HEIGHT);
                this.columnURL_XMLTEST = new global::System.Data.DataColumn("URL_XMLTEST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURL_XMLTEST);
                this.columnORIENTATION = new global::System.Data.DataColumn("ORIENTATION", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIENTATION);
                this.columnDATAWINDOW = new global::System.Data.DataColumn("DATAWINDOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATAWINDOW);
                this.columnPAPERSIZE = new global::System.Data.DataColumn("PAPERSIZE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAPERSIZE);
                this.columnPAPER_HEIGHT = new global::System.Data.DataColumn("PAPER_HEIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAPER_HEIGHT);
                this.columnPAPER_WIDTH = new global::System.Data.DataColumn("PAPER_WIDTH", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAPER_WIDTH);
                this.columnMARGIN_FLAG = new global::System.Data.DataColumn("MARGIN_FLAG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMARGIN_FLAG);
                this.columnMARGIN_TOP = new global::System.Data.DataColumn("MARGIN_TOP", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMARGIN_TOP);
                this.columnMARGIN_BOTTOM = new global::System.Data.DataColumn("MARGIN_BOTTOM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMARGIN_BOTTOM);
                this.columnMARGIN_LEFT = new global::System.Data.DataColumn("MARGIN_LEFT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMARGIN_LEFT);
                this.columnMARGIN_RIGHT = new global::System.Data.DataColumn("MARGIN_RIGHT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMARGIN_RIGHT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPRINTING_NAME}, true));
                this.columnPRINTING_NAME.AllowDBNull = false;
                this.columnPRINTING_NAME.Unique = true;
                this.columnPRINTING_NAME.MaxLength = 25;
                this.columnPRINTING_DESC.MaxLength = 100;
                this.columnPRIMARY_COLUMN.MaxLength = 100;
                this.columnPRINTER_NAMES.MaxLength = 300;
                this.columnPAPER_SIZE.MaxLength = 25;
                this.columnFONT_NAME.MaxLength = 100;
                this.columnFONT_COLOR.MaxLength = 100;
                this.columnFONT_BIUS.MaxLength = 5;
                this.columnURL_XMLTEST.MaxLength = 200;
                this.columnDATAWINDOW.MaxLength = 60;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERRow NewPAPRINTINGMASTERRow() {
                return ((PAPRINTINGMASTERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PAPRINTINGMASTERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PAPRINTINGMASTERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PAPRINTINGMASTERRowChanged != null)) {
                    this.PAPRINTINGMASTERRowChanged(this, new PAPRINTINGMASTERRowChangeEvent(((PAPRINTINGMASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PAPRINTINGMASTERRowChanging != null)) {
                    this.PAPRINTINGMASTERRowChanging(this, new PAPRINTINGMASTERRowChangeEvent(((PAPRINTINGMASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PAPRINTINGMASTERRowDeleted != null)) {
                    this.PAPRINTINGMASTERRowDeleted(this, new PAPRINTINGMASTERRowChangeEvent(((PAPRINTINGMASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PAPRINTINGMASTERRowDeleting != null)) {
                    this.PAPRINTINGMASTERRowDeleting(this, new PAPRINTINGMASTERRowChangeEvent(((PAPRINTINGMASTERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePAPRINTINGMASTERRow(PAPRINTINGMASTERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PaPrintingMaster ds = new PaPrintingMaster();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PAPRINTINGMASTERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PAPRINTINGMASTERRow : global::System.Data.DataRow {
            
            private PAPRINTINGMASTERDataTable tablePAPRINTINGMASTER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PAPRINTINGMASTERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePAPRINTINGMASTER = ((PAPRINTINGMASTERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PRINTING_NAME {
                get {
                    return ((string)(this[this.tablePAPRINTINGMASTER.PRINTING_NAMEColumn]));
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PRINTING_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PRINTING_DESC {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.PRINTING_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINTING_DESC\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PRINTING_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PRIMARY_COLUMN {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.PRIMARY_COLUMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRIMARY_COLUMN\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PRIMARY_COLUMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ROW_PERPAGE {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.ROW_PERPAGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROW_PERPAGE\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.ROW_PERPAGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AUTO_PRINT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.AUTO_PRINTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AUTO_PRINT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.AUTO_PRINTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AUTO_CLOSE {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.AUTO_CLOSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AUTO_CLOSE\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.AUTO_CLOSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PRINTER_NAMES {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.PRINTER_NAMESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINTER_NAMES\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PRINTER_NAMESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PAPER_SIZE {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.PAPER_SIZEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAPER_SIZE\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PAPER_SIZEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FONT_SIZE {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.FONT_SIZEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FONT_SIZE\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.FONT_SIZEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FONT_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.FONT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FONT_NAME\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.FONT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FONT_COLOR {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.FONT_COLORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FONT_COLOR\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.FONT_COLORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FONT_BIUS {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.FONT_BIUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FONT_BIUS\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.FONT_BIUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal HEAD_HEIGHT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.HEAD_HEIGHTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HEAD_HEIGHT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.HEAD_HEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DETAIL_HEIGHT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.DETAIL_HEIGHTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DETAIL_HEIGHT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.DETAIL_HEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TEST_WIDTH {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.TEST_WIDTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEST_WIDTH\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.TEST_WIDTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TEST_HEIGHT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.TEST_HEIGHTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEST_HEIGHT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.TEST_HEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string URL_XMLTEST {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.URL_XMLTESTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'URL_XMLTEST\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.URL_XMLTESTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ORIENTATION {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.ORIENTATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIENTATION\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.ORIENTATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DATAWINDOW {
                get {
                    try {
                        return ((string)(this[this.tablePAPRINTINGMASTER.DATAWINDOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATAWINDOW\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.DATAWINDOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PAPERSIZE {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.PAPERSIZEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAPERSIZE\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PAPERSIZEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PAPER_HEIGHT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.PAPER_HEIGHTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAPER_HEIGHT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PAPER_HEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PAPER_WIDTH {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.PAPER_WIDTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAPER_WIDTH\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.PAPER_WIDTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MARGIN_FLAG {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.MARGIN_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MARGIN_FLAG\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.MARGIN_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MARGIN_TOP {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.MARGIN_TOPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MARGIN_TOP\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.MARGIN_TOPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MARGIN_BOTTOM {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.MARGIN_BOTTOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MARGIN_BOTTOM\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.MARGIN_BOTTOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MARGIN_LEFT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.MARGIN_LEFTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MARGIN_LEFT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.MARGIN_LEFTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MARGIN_RIGHT {
                get {
                    try {
                        return ((decimal)(this[this.tablePAPRINTINGMASTER.MARGIN_RIGHTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MARGIN_RIGHT\' in table \'PAPRINTINGMASTER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePAPRINTINGMASTER.MARGIN_RIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRINTING_DESCNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PRINTING_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRINTING_DESCNull() {
                this[this.tablePAPRINTINGMASTER.PRINTING_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRIMARY_COLUMNNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PRIMARY_COLUMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRIMARY_COLUMNNull() {
                this[this.tablePAPRINTINGMASTER.PRIMARY_COLUMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsROW_PERPAGENull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.ROW_PERPAGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetROW_PERPAGENull() {
                this[this.tablePAPRINTINGMASTER.ROW_PERPAGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAUTO_PRINTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.AUTO_PRINTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAUTO_PRINTNull() {
                this[this.tablePAPRINTINGMASTER.AUTO_PRINTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAUTO_CLOSENull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.AUTO_CLOSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAUTO_CLOSENull() {
                this[this.tablePAPRINTINGMASTER.AUTO_CLOSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRINTER_NAMESNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PRINTER_NAMESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRINTER_NAMESNull() {
                this[this.tablePAPRINTINGMASTER.PRINTER_NAMESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAPER_SIZENull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PAPER_SIZEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAPER_SIZENull() {
                this[this.tablePAPRINTINGMASTER.PAPER_SIZEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFONT_SIZENull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.FONT_SIZEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFONT_SIZENull() {
                this[this.tablePAPRINTINGMASTER.FONT_SIZEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFONT_NAMENull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.FONT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFONT_NAMENull() {
                this[this.tablePAPRINTINGMASTER.FONT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFONT_COLORNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.FONT_COLORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFONT_COLORNull() {
                this[this.tablePAPRINTINGMASTER.FONT_COLORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFONT_BIUSNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.FONT_BIUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFONT_BIUSNull() {
                this[this.tablePAPRINTINGMASTER.FONT_BIUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHEAD_HEIGHTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.HEAD_HEIGHTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHEAD_HEIGHTNull() {
                this[this.tablePAPRINTINGMASTER.HEAD_HEIGHTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDETAIL_HEIGHTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.DETAIL_HEIGHTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDETAIL_HEIGHTNull() {
                this[this.tablePAPRINTINGMASTER.DETAIL_HEIGHTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTEST_WIDTHNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.TEST_WIDTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTEST_WIDTHNull() {
                this[this.tablePAPRINTINGMASTER.TEST_WIDTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTEST_HEIGHTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.TEST_HEIGHTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTEST_HEIGHTNull() {
                this[this.tablePAPRINTINGMASTER.TEST_HEIGHTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsURL_XMLTESTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.URL_XMLTESTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetURL_XMLTESTNull() {
                this[this.tablePAPRINTINGMASTER.URL_XMLTESTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsORIENTATIONNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.ORIENTATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetORIENTATIONNull() {
                this[this.tablePAPRINTINGMASTER.ORIENTATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDATAWINDOWNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.DATAWINDOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDATAWINDOWNull() {
                this[this.tablePAPRINTINGMASTER.DATAWINDOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAPERSIZENull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PAPERSIZEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAPERSIZENull() {
                this[this.tablePAPRINTINGMASTER.PAPERSIZEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAPER_HEIGHTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PAPER_HEIGHTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAPER_HEIGHTNull() {
                this[this.tablePAPRINTINGMASTER.PAPER_HEIGHTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPAPER_WIDTHNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.PAPER_WIDTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPAPER_WIDTHNull() {
                this[this.tablePAPRINTINGMASTER.PAPER_WIDTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMARGIN_FLAGNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.MARGIN_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMARGIN_FLAGNull() {
                this[this.tablePAPRINTINGMASTER.MARGIN_FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMARGIN_TOPNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.MARGIN_TOPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMARGIN_TOPNull() {
                this[this.tablePAPRINTINGMASTER.MARGIN_TOPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMARGIN_BOTTOMNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.MARGIN_BOTTOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMARGIN_BOTTOMNull() {
                this[this.tablePAPRINTINGMASTER.MARGIN_BOTTOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMARGIN_LEFTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.MARGIN_LEFTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMARGIN_LEFTNull() {
                this[this.tablePAPRINTINGMASTER.MARGIN_LEFTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMARGIN_RIGHTNull() {
                return this.IsNull(this.tablePAPRINTINGMASTER.MARGIN_RIGHTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMARGIN_RIGHTNull() {
                this[this.tablePAPRINTINGMASTER.MARGIN_RIGHTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PAPRINTINGMASTERRowChangeEvent : global::System.EventArgs {
            
            private PAPRINTINGMASTERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERRowChangeEvent(PAPRINTINGMASTERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PAPRINTINGMASTERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Saving.Applications.admin.w_sheet_setPrinter_ctrl.PaPrintingMasterTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PAPRINTINGMASTERTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PAPRINTINGMASTERTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PAPRINTINGMASTER";
            tableMapping.ColumnMappings.Add("PRINTING_NAME", "PRINTING_NAME");
            tableMapping.ColumnMappings.Add("PRINTING_DESC", "PRINTING_DESC");
            tableMapping.ColumnMappings.Add("PRIMARY_COLUMN", "PRIMARY_COLUMN");
            tableMapping.ColumnMappings.Add("ROW_PERPAGE", "ROW_PERPAGE");
            tableMapping.ColumnMappings.Add("AUTO_PRINT", "AUTO_PRINT");
            tableMapping.ColumnMappings.Add("AUTO_CLOSE", "AUTO_CLOSE");
            tableMapping.ColumnMappings.Add("PRINTER_NAMES", "PRINTER_NAMES");
            tableMapping.ColumnMappings.Add("PAPER_SIZE", "PAPER_SIZE");
            tableMapping.ColumnMappings.Add("FONT_SIZE", "FONT_SIZE");
            tableMapping.ColumnMappings.Add("FONT_NAME", "FONT_NAME");
            tableMapping.ColumnMappings.Add("FONT_COLOR", "FONT_COLOR");
            tableMapping.ColumnMappings.Add("FONT_BIUS", "FONT_BIUS");
            tableMapping.ColumnMappings.Add("HEAD_HEIGHT", "HEAD_HEIGHT");
            tableMapping.ColumnMappings.Add("DETAIL_HEIGHT", "DETAIL_HEIGHT");
            tableMapping.ColumnMappings.Add("TEST_WIDTH", "TEST_WIDTH");
            tableMapping.ColumnMappings.Add("TEST_HEIGHT", "TEST_HEIGHT");
            tableMapping.ColumnMappings.Add("URL_XMLTEST", "URL_XMLTEST");
            tableMapping.ColumnMappings.Add("ORIENTATION", "ORIENTATION");
            tableMapping.ColumnMappings.Add("DATAWINDOW", "DATAWINDOW");
            tableMapping.ColumnMappings.Add("PAPERSIZE", "PAPERSIZE");
            tableMapping.ColumnMappings.Add("PAPER_HEIGHT", "PAPER_HEIGHT");
            tableMapping.ColumnMappings.Add("PAPER_WIDTH", "PAPER_WIDTH");
            tableMapping.ColumnMappings.Add("MARGIN_FLAG", "MARGIN_FLAG");
            tableMapping.ColumnMappings.Add("MARGIN_TOP", "MARGIN_TOP");
            tableMapping.ColumnMappings.Add("MARGIN_BOTTOM", "MARGIN_BOTTOM");
            tableMapping.ColumnMappings.Add("MARGIN_LEFT", "MARGIN_LEFT");
            tableMapping.ColumnMappings.Add("MARGIN_RIGHT", "MARGIN_RIGHT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"PAPRINTINGMASTER\" WHERE ((\"PRINTING_NAME\" = :Original_PRINTING_NAME)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_PRINTING_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTING_NAME", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""PAPRINTINGMASTER"" (""PRINTING_NAME"", ""PRINTING_DESC"", ""PRIMARY_COLUMN"", ""ROW_PERPAGE"", ""AUTO_PRINT"", ""AUTO_CLOSE"", ""PRINTER_NAMES"", ""PAPER_SIZE"", ""FONT_SIZE"", ""FONT_NAME"", ""FONT_COLOR"", ""FONT_BIUS"", ""HEAD_HEIGHT"", ""DETAIL_HEIGHT"", ""TEST_WIDTH"", ""TEST_HEIGHT"", ""URL_XMLTEST"", ""ORIENTATION"", ""DATAWINDOW"", ""PAPERSIZE"", ""PAPER_HEIGHT"", ""PAPER_WIDTH"", ""MARGIN_FLAG"", ""MARGIN_TOP"", ""MARGIN_BOTTOM"", ""MARGIN_LEFT"", ""MARGIN_RIGHT"") VALUES (:PRINTING_NAME, :PRINTING_DESC, :PRIMARY_COLUMN, :ROW_PERPAGE, :AUTO_PRINT, :AUTO_CLOSE, :PRINTER_NAMES, :PAPER_SIZE, :FONT_SIZE, :FONT_NAME, :FONT_COLOR, :FONT_BIUS, :HEAD_HEIGHT, :DETAIL_HEIGHT, :TEST_WIDTH, :TEST_HEIGHT, :URL_XMLTEST, :ORIENTATION, :DATAWINDOW, :PAPERSIZE, :PAPER_HEIGHT, :PAPER_WIDTH, :MARGIN_FLAG, :MARGIN_TOP, :MARGIN_BOTTOM, :MARGIN_LEFT, :MARGIN_RIGHT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRINTING_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTING_NAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRINTING_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTING_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRIMARY_COLUMN", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRIMARY_COLUMN", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ROW_PERPAGE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "ROW_PERPAGE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("AUTO_PRINT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "AUTO_PRINT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("AUTO_CLOSE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "AUTO_CLOSE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRINTER_NAMES", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTER_NAMES", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPER_SIZE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PAPER_SIZE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_SIZE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "FONT_SIZE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FONT_NAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_COLOR", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FONT_COLOR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_BIUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FONT_BIUS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("HEAD_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "HEAD_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DETAIL_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DETAIL_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TEST_WIDTH", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "TEST_WIDTH", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TEST_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "TEST_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("URL_XMLTEST", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "URL_XMLTEST", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORIENTATION", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "ORIENTATION", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DATAWINDOW", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "DATAWINDOW", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPERSIZE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "PAPERSIZE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPER_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "PAPER_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPER_WIDTH", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "PAPER_WIDTH", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_TOP", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_TOP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_BOTTOM", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_BOTTOM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_LEFT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_LEFT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_RIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_RIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""PAPRINTINGMASTER"" SET ""PRINTING_NAME"" = :PRINTING_NAME, ""PRINTING_DESC"" = :PRINTING_DESC, ""PRIMARY_COLUMN"" = :PRIMARY_COLUMN, ""ROW_PERPAGE"" = :ROW_PERPAGE, ""AUTO_PRINT"" = :AUTO_PRINT, ""AUTO_CLOSE"" = :AUTO_CLOSE, ""PRINTER_NAMES"" = :PRINTER_NAMES, ""PAPER_SIZE"" = :PAPER_SIZE, ""FONT_SIZE"" = :FONT_SIZE, ""FONT_NAME"" = :FONT_NAME, ""FONT_COLOR"" = :FONT_COLOR, ""FONT_BIUS"" = :FONT_BIUS, ""HEAD_HEIGHT"" = :HEAD_HEIGHT, ""DETAIL_HEIGHT"" = :DETAIL_HEIGHT, ""TEST_WIDTH"" = :TEST_WIDTH, ""TEST_HEIGHT"" = :TEST_HEIGHT, ""URL_XMLTEST"" = :URL_XMLTEST, ""ORIENTATION"" = :ORIENTATION, ""DATAWINDOW"" = :DATAWINDOW, ""PAPERSIZE"" = :PAPERSIZE, ""PAPER_HEIGHT"" = :PAPER_HEIGHT, ""PAPER_WIDTH"" = :PAPER_WIDTH, ""MARGIN_FLAG"" = :MARGIN_FLAG, ""MARGIN_TOP"" = :MARGIN_TOP, ""MARGIN_BOTTOM"" = :MARGIN_BOTTOM, ""MARGIN_LEFT"" = :MARGIN_LEFT, ""MARGIN_RIGHT"" = :MARGIN_RIGHT WHERE ((""PRINTING_NAME"" = :Original_PRINTING_NAME))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRINTING_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTING_NAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRINTING_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTING_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRIMARY_COLUMN", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRIMARY_COLUMN", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ROW_PERPAGE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "ROW_PERPAGE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("AUTO_PRINT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "AUTO_PRINT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("AUTO_CLOSE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "AUTO_CLOSE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PRINTER_NAMES", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTER_NAMES", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPER_SIZE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PAPER_SIZE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_SIZE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "FONT_SIZE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FONT_NAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_COLOR", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FONT_COLOR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FONT_BIUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "FONT_BIUS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("HEAD_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "HEAD_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DETAIL_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DETAIL_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TEST_WIDTH", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "TEST_WIDTH", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TEST_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "TEST_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("URL_XMLTEST", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "URL_XMLTEST", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORIENTATION", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "ORIENTATION", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DATAWINDOW", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "DATAWINDOW", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPERSIZE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "PAPERSIZE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPER_HEIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "PAPER_HEIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PAPER_WIDTH", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "PAPER_WIDTH", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_TOP", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_TOP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_BOTTOM", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_BOTTOM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_LEFT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_LEFT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MARGIN_RIGHT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MARGIN_RIGHT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_PRINTING_NAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PRINTING_NAME", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select * from paprintingmaster";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(PaPrintingMaster.PAPRINTINGMASTERDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PaPrintingMaster.PAPRINTINGMASTERDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PaPrintingMaster.PAPRINTINGMASTERDataTable dataTable = new PaPrintingMaster.PAPRINTINGMASTERDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PaPrintingMaster.PAPRINTINGMASTERDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(PaPrintingMaster dataSet) {
            return this.Adapter.Update(dataSet, "PAPRINTINGMASTER");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_PRINTING_NAME) {
            if ((Original_PRINTING_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_PRINTING_NAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_PRINTING_NAME));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string PRINTING_NAME, 
                    string PRINTING_DESC, 
                    string PRIMARY_COLUMN, 
                    global::System.Nullable<decimal> ROW_PERPAGE, 
                    global::System.Nullable<decimal> AUTO_PRINT, 
                    global::System.Nullable<decimal> AUTO_CLOSE, 
                    string PRINTER_NAMES, 
                    string PAPER_SIZE, 
                    global::System.Nullable<decimal> FONT_SIZE, 
                    string FONT_NAME, 
                    string FONT_COLOR, 
                    string FONT_BIUS, 
                    global::System.Nullable<decimal> HEAD_HEIGHT, 
                    global::System.Nullable<decimal> DETAIL_HEIGHT, 
                    global::System.Nullable<decimal> TEST_WIDTH, 
                    global::System.Nullable<decimal> TEST_HEIGHT, 
                    string URL_XMLTEST, 
                    global::System.Nullable<decimal> ORIENTATION, 
                    string DATAWINDOW, 
                    global::System.Nullable<decimal> PAPERSIZE, 
                    global::System.Nullable<decimal> PAPER_HEIGHT, 
                    global::System.Nullable<decimal> PAPER_WIDTH, 
                    global::System.Nullable<decimal> MARGIN_FLAG, 
                    global::System.Nullable<decimal> MARGIN_TOP, 
                    global::System.Nullable<decimal> MARGIN_BOTTOM, 
                    global::System.Nullable<decimal> MARGIN_LEFT, 
                    global::System.Nullable<decimal> MARGIN_RIGHT) {
            if ((PRINTING_NAME == null)) {
                throw new global::System.ArgumentNullException("PRINTING_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PRINTING_NAME));
            }
            if ((PRINTING_DESC == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PRINTING_DESC));
            }
            if ((PRIMARY_COLUMN == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PRIMARY_COLUMN));
            }
            if ((ROW_PERPAGE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(ROW_PERPAGE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AUTO_PRINT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(AUTO_PRINT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((AUTO_CLOSE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(AUTO_CLOSE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PRINTER_NAMES == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PRINTER_NAMES));
            }
            if ((PAPER_SIZE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(PAPER_SIZE));
            }
            if ((FONT_SIZE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(FONT_SIZE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((FONT_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(FONT_NAME));
            }
            if ((FONT_COLOR == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(FONT_COLOR));
            }
            if ((FONT_BIUS == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(FONT_BIUS));
            }
            if ((HEAD_HEIGHT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(HEAD_HEIGHT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DETAIL_HEIGHT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(DETAIL_HEIGHT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((TEST_WIDTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(TEST_WIDTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((TEST_HEIGHT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(TEST_HEIGHT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((URL_XMLTEST == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(URL_XMLTEST));
            }
            if ((ORIENTATION.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(ORIENTATION.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((DATAWINDOW == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(DATAWINDOW));
            }
            if ((PAPERSIZE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(PAPERSIZE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((PAPER_HEIGHT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(PAPER_HEIGHT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((PAPER_WIDTH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(PAPER_WIDTH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_FLAG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(MARGIN_FLAG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_TOP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(MARGIN_TOP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_BOTTOM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(MARGIN_BOTTOM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_LEFT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(MARGIN_LEFT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_RIGHT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(MARGIN_RIGHT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PRINTING_NAME, 
                    string PRINTING_DESC, 
                    string PRIMARY_COLUMN, 
                    global::System.Nullable<decimal> ROW_PERPAGE, 
                    global::System.Nullable<decimal> AUTO_PRINT, 
                    global::System.Nullable<decimal> AUTO_CLOSE, 
                    string PRINTER_NAMES, 
                    string PAPER_SIZE, 
                    global::System.Nullable<decimal> FONT_SIZE, 
                    string FONT_NAME, 
                    string FONT_COLOR, 
                    string FONT_BIUS, 
                    global::System.Nullable<decimal> HEAD_HEIGHT, 
                    global::System.Nullable<decimal> DETAIL_HEIGHT, 
                    global::System.Nullable<decimal> TEST_WIDTH, 
                    global::System.Nullable<decimal> TEST_HEIGHT, 
                    string URL_XMLTEST, 
                    global::System.Nullable<decimal> ORIENTATION, 
                    string DATAWINDOW, 
                    global::System.Nullable<decimal> PAPERSIZE, 
                    global::System.Nullable<decimal> PAPER_HEIGHT, 
                    global::System.Nullable<decimal> PAPER_WIDTH, 
                    global::System.Nullable<decimal> MARGIN_FLAG, 
                    global::System.Nullable<decimal> MARGIN_TOP, 
                    global::System.Nullable<decimal> MARGIN_BOTTOM, 
                    global::System.Nullable<decimal> MARGIN_LEFT, 
                    global::System.Nullable<decimal> MARGIN_RIGHT, 
                    string Original_PRINTING_NAME) {
            if ((PRINTING_NAME == null)) {
                throw new global::System.ArgumentNullException("PRINTING_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PRINTING_NAME));
            }
            if ((PRINTING_DESC == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PRINTING_DESC));
            }
            if ((PRIMARY_COLUMN == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PRIMARY_COLUMN));
            }
            if ((ROW_PERPAGE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(ROW_PERPAGE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AUTO_PRINT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(AUTO_PRINT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((AUTO_CLOSE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(AUTO_CLOSE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PRINTER_NAMES == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PRINTER_NAMES));
            }
            if ((PAPER_SIZE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(PAPER_SIZE));
            }
            if ((FONT_SIZE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(FONT_SIZE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((FONT_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(FONT_NAME));
            }
            if ((FONT_COLOR == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(FONT_COLOR));
            }
            if ((FONT_BIUS == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(FONT_BIUS));
            }
            if ((HEAD_HEIGHT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(HEAD_HEIGHT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((DETAIL_HEIGHT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(DETAIL_HEIGHT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((TEST_WIDTH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(TEST_WIDTH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((TEST_HEIGHT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(TEST_HEIGHT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((URL_XMLTEST == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(URL_XMLTEST));
            }
            if ((ORIENTATION.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(ORIENTATION.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((DATAWINDOW == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(DATAWINDOW));
            }
            if ((PAPERSIZE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(PAPERSIZE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((PAPER_HEIGHT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(PAPER_HEIGHT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((PAPER_WIDTH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(PAPER_WIDTH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_FLAG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(MARGIN_FLAG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_TOP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(MARGIN_TOP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_BOTTOM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(MARGIN_BOTTOM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_LEFT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(MARGIN_LEFT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((MARGIN_RIGHT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(MARGIN_RIGHT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_PRINTING_NAME == null)) {
                throw new global::System.ArgumentNullException("Original_PRINTING_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_PRINTING_NAME));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string PRINTING_DESC, 
                    string PRIMARY_COLUMN, 
                    global::System.Nullable<decimal> ROW_PERPAGE, 
                    global::System.Nullable<decimal> AUTO_PRINT, 
                    global::System.Nullable<decimal> AUTO_CLOSE, 
                    string PRINTER_NAMES, 
                    string PAPER_SIZE, 
                    global::System.Nullable<decimal> FONT_SIZE, 
                    string FONT_NAME, 
                    string FONT_COLOR, 
                    string FONT_BIUS, 
                    global::System.Nullable<decimal> HEAD_HEIGHT, 
                    global::System.Nullable<decimal> DETAIL_HEIGHT, 
                    global::System.Nullable<decimal> TEST_WIDTH, 
                    global::System.Nullable<decimal> TEST_HEIGHT, 
                    string URL_XMLTEST, 
                    global::System.Nullable<decimal> ORIENTATION, 
                    string DATAWINDOW, 
                    global::System.Nullable<decimal> PAPERSIZE, 
                    global::System.Nullable<decimal> PAPER_HEIGHT, 
                    global::System.Nullable<decimal> PAPER_WIDTH, 
                    global::System.Nullable<decimal> MARGIN_FLAG, 
                    global::System.Nullable<decimal> MARGIN_TOP, 
                    global::System.Nullable<decimal> MARGIN_BOTTOM, 
                    global::System.Nullable<decimal> MARGIN_LEFT, 
                    global::System.Nullable<decimal> MARGIN_RIGHT, 
                    string Original_PRINTING_NAME) {
            return this.Update(Original_PRINTING_NAME, PRINTING_DESC, PRIMARY_COLUMN, ROW_PERPAGE, AUTO_PRINT, AUTO_CLOSE, PRINTER_NAMES, PAPER_SIZE, FONT_SIZE, FONT_NAME, FONT_COLOR, FONT_BIUS, HEAD_HEIGHT, DETAIL_HEIGHT, TEST_WIDTH, TEST_HEIGHT, URL_XMLTEST, ORIENTATION, DATAWINDOW, PAPERSIZE, PAPER_HEIGHT, PAPER_WIDTH, MARGIN_FLAG, MARGIN_TOP, MARGIN_BOTTOM, MARGIN_LEFT, MARGIN_RIGHT, Original_PRINTING_NAME);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private PAPRINTINGMASTERTableAdapter _pAPRINTINGMASTERTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PAPRINTINGMASTERTableAdapter PAPRINTINGMASTERTableAdapter {
            get {
                return this._pAPRINTINGMASTERTableAdapter;
            }
            set {
                this._pAPRINTINGMASTERTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._pAPRINTINGMASTERTableAdapter != null) 
                            && (this._pAPRINTINGMASTERTableAdapter.Connection != null))) {
                    return this._pAPRINTINGMASTERTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._pAPRINTINGMASTERTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(PaPrintingMaster dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pAPRINTINGMASTERTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PAPRINTINGMASTER.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pAPRINTINGMASTERTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(PaPrintingMaster dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pAPRINTINGMASTERTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PAPRINTINGMASTER.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pAPRINTINGMASTERTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(PaPrintingMaster dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._pAPRINTINGMASTERTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PAPRINTINGMASTER.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pAPRINTINGMASTERTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(PaPrintingMaster dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._pAPRINTINGMASTERTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pAPRINTINGMASTERTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._pAPRINTINGMASTERTableAdapter != null)) {
                    revertConnections.Add(this._pAPRINTINGMASTERTableAdapter, this._pAPRINTINGMASTERTableAdapter.Connection);
                    this._pAPRINTINGMASTERTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._pAPRINTINGMASTERTableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._pAPRINTINGMASTERTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pAPRINTINGMASTERTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pAPRINTINGMASTERTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._pAPRINTINGMASTERTableAdapter != null)) {
                    this._pAPRINTINGMASTERTableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._pAPRINTINGMASTERTableAdapter]));
                    this._pAPRINTINGMASTERTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591