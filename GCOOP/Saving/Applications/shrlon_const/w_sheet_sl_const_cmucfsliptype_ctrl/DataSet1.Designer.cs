//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Saving.Applications.shrlon_const.w_sheet_sl_const_cmucfsliptype_ctrl {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private CMUCFSLIPTYPEDataTable tableCMUCFSLIPTYPE;
        
        private SLUCFSLIPTYPEDataTable tableSLUCFSLIPTYPE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CMUCFSLIPTYPE"] != null)) {
                    base.Tables.Add(new CMUCFSLIPTYPEDataTable(ds.Tables["CMUCFSLIPTYPE"]));
                }
                if ((ds.Tables["SLUCFSLIPTYPE"] != null)) {
                    base.Tables.Add(new SLUCFSLIPTYPEDataTable(ds.Tables["SLUCFSLIPTYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CMUCFSLIPTYPEDataTable CMUCFSLIPTYPE {
            get {
                return this.tableCMUCFSLIPTYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SLUCFSLIPTYPEDataTable SLUCFSLIPTYPE {
            get {
                return this.tableSLUCFSLIPTYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CMUCFSLIPTYPE"] != null)) {
                    base.Tables.Add(new CMUCFSLIPTYPEDataTable(ds.Tables["CMUCFSLIPTYPE"]));
                }
                if ((ds.Tables["SLUCFSLIPTYPE"] != null)) {
                    base.Tables.Add(new SLUCFSLIPTYPEDataTable(ds.Tables["SLUCFSLIPTYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCMUCFSLIPTYPE = ((CMUCFSLIPTYPEDataTable)(base.Tables["CMUCFSLIPTYPE"]));
            if ((initTable == true)) {
                if ((this.tableCMUCFSLIPTYPE != null)) {
                    this.tableCMUCFSLIPTYPE.InitVars();
                }
            }
            this.tableSLUCFSLIPTYPE = ((SLUCFSLIPTYPEDataTable)(base.Tables["SLUCFSLIPTYPE"]));
            if ((initTable == true)) {
                if ((this.tableSLUCFSLIPTYPE != null)) {
                    this.tableSLUCFSLIPTYPE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCMUCFSLIPTYPE = new CMUCFSLIPTYPEDataTable();
            base.Tables.Add(this.tableCMUCFSLIPTYPE);
            this.tableSLUCFSLIPTYPE = new SLUCFSLIPTYPEDataTable();
            base.Tables.Add(this.tableSLUCFSLIPTYPE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCMUCFSLIPTYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSLUCFSLIPTYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void CMUCFSLIPTYPERowChangeEventHandler(object sender, CMUCFSLIPTYPERowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SLUCFSLIPTYPERowChangeEventHandler(object sender, SLUCFSLIPTYPERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CMUCFSLIPTYPEDataTable : global::System.Data.TypedTableBase<CMUCFSLIPTYPERow> {
            
            private global::System.Data.DataColumn columnSLIPTYPE_CODE;
            
            private global::System.Data.DataColumn columnSLIPTYPE_DESC;
            
            private global::System.Data.DataColumn columnSLIPTYPE_SORT;
            
            private global::System.Data.DataColumn columnSLIPTYPE_FLAG;
            
            private global::System.Data.DataColumn columnSHSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnCSHSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnLNSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnCLNSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnMONEYTYPE_SUPPORT;
            
            private global::System.Data.DataColumn columnSLIPMANUAL_FLAG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPEDataTable() {
                this.TableName = "CMUCFSLIPTYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CMUCFSLIPTYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected CMUCFSLIPTYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_CODEColumn {
                get {
                    return this.columnSLIPTYPE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_DESCColumn {
                get {
                    return this.columnSLIPTYPE_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_SORTColumn {
                get {
                    return this.columnSLIPTYPE_SORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_FLAGColumn {
                get {
                    return this.columnSLIPTYPE_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHSTM_ITEMTYPEColumn {
                get {
                    return this.columnSHSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CSHSTM_ITEMTYPEColumn {
                get {
                    return this.columnCSHSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LNSTM_ITEMTYPEColumn {
                get {
                    return this.columnLNSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CLNSTM_ITEMTYPEColumn {
                get {
                    return this.columnCLNSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MONEYTYPE_SUPPORTColumn {
                get {
                    return this.columnMONEYTYPE_SUPPORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPMANUAL_FLAGColumn {
                get {
                    return this.columnSLIPMANUAL_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPERow this[int index] {
                get {
                    return ((CMUCFSLIPTYPERow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CMUCFSLIPTYPERowChangeEventHandler CMUCFSLIPTYPERowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CMUCFSLIPTYPERowChangeEventHandler CMUCFSLIPTYPERowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CMUCFSLIPTYPERowChangeEventHandler CMUCFSLIPTYPERowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event CMUCFSLIPTYPERowChangeEventHandler CMUCFSLIPTYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCMUCFSLIPTYPERow(CMUCFSLIPTYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPERow AddCMUCFSLIPTYPERow(string SLIPTYPE_CODE, string SLIPTYPE_DESC, decimal SLIPTYPE_SORT, decimal SLIPTYPE_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, string MONEYTYPE_SUPPORT, decimal SLIPMANUAL_FLAG) {
                CMUCFSLIPTYPERow rowCMUCFSLIPTYPERow = ((CMUCFSLIPTYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SLIPTYPE_CODE,
                        SLIPTYPE_DESC,
                        SLIPTYPE_SORT,
                        SLIPTYPE_FLAG,
                        SHSTM_ITEMTYPE,
                        CSHSTM_ITEMTYPE,
                        LNSTM_ITEMTYPE,
                        CLNSTM_ITEMTYPE,
                        MONEYTYPE_SUPPORT,
                        SLIPMANUAL_FLAG};
                rowCMUCFSLIPTYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCMUCFSLIPTYPERow);
                return rowCMUCFSLIPTYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPERow FindBySLIPTYPE_CODE(string SLIPTYPE_CODE) {
                return ((CMUCFSLIPTYPERow)(this.Rows.Find(new object[] {
                            SLIPTYPE_CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                CMUCFSLIPTYPEDataTable cln = ((CMUCFSLIPTYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CMUCFSLIPTYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSLIPTYPE_CODE = base.Columns["SLIPTYPE_CODE"];
                this.columnSLIPTYPE_DESC = base.Columns["SLIPTYPE_DESC"];
                this.columnSLIPTYPE_SORT = base.Columns["SLIPTYPE_SORT"];
                this.columnSLIPTYPE_FLAG = base.Columns["SLIPTYPE_FLAG"];
                this.columnSHSTM_ITEMTYPE = base.Columns["SHSTM_ITEMTYPE"];
                this.columnCSHSTM_ITEMTYPE = base.Columns["CSHSTM_ITEMTYPE"];
                this.columnLNSTM_ITEMTYPE = base.Columns["LNSTM_ITEMTYPE"];
                this.columnCLNSTM_ITEMTYPE = base.Columns["CLNSTM_ITEMTYPE"];
                this.columnMONEYTYPE_SUPPORT = base.Columns["MONEYTYPE_SUPPORT"];
                this.columnSLIPMANUAL_FLAG = base.Columns["SLIPMANUAL_FLAG"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSLIPTYPE_CODE = new global::System.Data.DataColumn("SLIPTYPE_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_CODE);
                this.columnSLIPTYPE_DESC = new global::System.Data.DataColumn("SLIPTYPE_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_DESC);
                this.columnSLIPTYPE_SORT = new global::System.Data.DataColumn("SLIPTYPE_SORT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_SORT);
                this.columnSLIPTYPE_FLAG = new global::System.Data.DataColumn("SLIPTYPE_FLAG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_FLAG);
                this.columnSHSTM_ITEMTYPE = new global::System.Data.DataColumn("SHSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHSTM_ITEMTYPE);
                this.columnCSHSTM_ITEMTYPE = new global::System.Data.DataColumn("CSHSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCSHSTM_ITEMTYPE);
                this.columnLNSTM_ITEMTYPE = new global::System.Data.DataColumn("LNSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLNSTM_ITEMTYPE);
                this.columnCLNSTM_ITEMTYPE = new global::System.Data.DataColumn("CLNSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLNSTM_ITEMTYPE);
                this.columnMONEYTYPE_SUPPORT = new global::System.Data.DataColumn("MONEYTYPE_SUPPORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONEYTYPE_SUPPORT);
                this.columnSLIPMANUAL_FLAG = new global::System.Data.DataColumn("SLIPMANUAL_FLAG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPMANUAL_FLAG);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSLIPTYPE_CODE}, true));
                this.columnSLIPTYPE_CODE.AllowDBNull = false;
                this.columnSLIPTYPE_CODE.Unique = true;
                this.columnSLIPTYPE_CODE.MaxLength = 3;
                this.columnSLIPTYPE_DESC.MaxLength = 60;
                this.columnSHSTM_ITEMTYPE.MaxLength = 3;
                this.columnCSHSTM_ITEMTYPE.MaxLength = 3;
                this.columnLNSTM_ITEMTYPE.MaxLength = 3;
                this.columnCLNSTM_ITEMTYPE.MaxLength = 3;
                this.columnMONEYTYPE_SUPPORT.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPERow NewCMUCFSLIPTYPERow() {
                return ((CMUCFSLIPTYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CMUCFSLIPTYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(CMUCFSLIPTYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CMUCFSLIPTYPERowChanged != null)) {
                    this.CMUCFSLIPTYPERowChanged(this, new CMUCFSLIPTYPERowChangeEvent(((CMUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CMUCFSLIPTYPERowChanging != null)) {
                    this.CMUCFSLIPTYPERowChanging(this, new CMUCFSLIPTYPERowChangeEvent(((CMUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CMUCFSLIPTYPERowDeleted != null)) {
                    this.CMUCFSLIPTYPERowDeleted(this, new CMUCFSLIPTYPERowChangeEvent(((CMUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CMUCFSLIPTYPERowDeleting != null)) {
                    this.CMUCFSLIPTYPERowDeleting(this, new CMUCFSLIPTYPERowChangeEvent(((CMUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCMUCFSLIPTYPERow(CMUCFSLIPTYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CMUCFSLIPTYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SLUCFSLIPTYPEDataTable : global::System.Data.TypedTableBase<SLUCFSLIPTYPERow> {
            
            private global::System.Data.DataColumn columnSLIPTYPE_CODE;
            
            private global::System.Data.DataColumn columnSLIPTYPE_DESC;
            
            private global::System.Data.DataColumn columnSLIPTYPE_SORT;
            
            private global::System.Data.DataColumn columnSLIPTYPESIGN_FLAG;
            
            private global::System.Data.DataColumn columnSHSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnCSHSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnLNSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnCLNSTM_ITEMTYPE;
            
            private global::System.Data.DataColumn columnSLIPMANUAL_FLAG;
            
            private global::System.Data.DataColumn columnMONEYTYPE_SUPPORT;
            
            private global::System.Data.DataColumn columnSHPAY_DESC;
            
            private global::System.Data.DataColumn columnLNPAY_DESC;
            
            private global::System.Data.DataColumn columnSLIPTYPE_GROUP;
            
            private global::System.Data.DataColumn columnDELITEMNOTOPERATE_FLAG;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPEDataTable() {
                this.TableName = "SLUCFSLIPTYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SLUCFSLIPTYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SLUCFSLIPTYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_CODEColumn {
                get {
                    return this.columnSLIPTYPE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_DESCColumn {
                get {
                    return this.columnSLIPTYPE_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_SORTColumn {
                get {
                    return this.columnSLIPTYPE_SORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPESIGN_FLAGColumn {
                get {
                    return this.columnSLIPTYPESIGN_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHSTM_ITEMTYPEColumn {
                get {
                    return this.columnSHSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CSHSTM_ITEMTYPEColumn {
                get {
                    return this.columnCSHSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LNSTM_ITEMTYPEColumn {
                get {
                    return this.columnLNSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CLNSTM_ITEMTYPEColumn {
                get {
                    return this.columnCLNSTM_ITEMTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPMANUAL_FLAGColumn {
                get {
                    return this.columnSLIPMANUAL_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MONEYTYPE_SUPPORTColumn {
                get {
                    return this.columnMONEYTYPE_SUPPORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHPAY_DESCColumn {
                get {
                    return this.columnSHPAY_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LNPAY_DESCColumn {
                get {
                    return this.columnLNPAY_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SLIPTYPE_GROUPColumn {
                get {
                    return this.columnSLIPTYPE_GROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DELITEMNOTOPERATE_FLAGColumn {
                get {
                    return this.columnDELITEMNOTOPERATE_FLAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPERow this[int index] {
                get {
                    return ((SLUCFSLIPTYPERow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SLUCFSLIPTYPERowChangeEventHandler SLUCFSLIPTYPERowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SLUCFSLIPTYPERowChangeEventHandler SLUCFSLIPTYPERowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SLUCFSLIPTYPERowChangeEventHandler SLUCFSLIPTYPERowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SLUCFSLIPTYPERowChangeEventHandler SLUCFSLIPTYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSLUCFSLIPTYPERow(SLUCFSLIPTYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPERow AddSLUCFSLIPTYPERow(string SLIPTYPE_CODE, string SLIPTYPE_DESC, decimal SLIPTYPE_SORT, decimal SLIPTYPESIGN_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, decimal SLIPMANUAL_FLAG, string MONEYTYPE_SUPPORT, string SHPAY_DESC, string LNPAY_DESC, string SLIPTYPE_GROUP, decimal DELITEMNOTOPERATE_FLAG) {
                SLUCFSLIPTYPERow rowSLUCFSLIPTYPERow = ((SLUCFSLIPTYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SLIPTYPE_CODE,
                        SLIPTYPE_DESC,
                        SLIPTYPE_SORT,
                        SLIPTYPESIGN_FLAG,
                        SHSTM_ITEMTYPE,
                        CSHSTM_ITEMTYPE,
                        LNSTM_ITEMTYPE,
                        CLNSTM_ITEMTYPE,
                        SLIPMANUAL_FLAG,
                        MONEYTYPE_SUPPORT,
                        SHPAY_DESC,
                        LNPAY_DESC,
                        SLIPTYPE_GROUP,
                        DELITEMNOTOPERATE_FLAG};
                rowSLUCFSLIPTYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSLUCFSLIPTYPERow);
                return rowSLUCFSLIPTYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPERow FindBySLIPTYPE_CODE(string SLIPTYPE_CODE) {
                return ((SLUCFSLIPTYPERow)(this.Rows.Find(new object[] {
                            SLIPTYPE_CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SLUCFSLIPTYPEDataTable cln = ((SLUCFSLIPTYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SLUCFSLIPTYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSLIPTYPE_CODE = base.Columns["SLIPTYPE_CODE"];
                this.columnSLIPTYPE_DESC = base.Columns["SLIPTYPE_DESC"];
                this.columnSLIPTYPE_SORT = base.Columns["SLIPTYPE_SORT"];
                this.columnSLIPTYPESIGN_FLAG = base.Columns["SLIPTYPESIGN_FLAG"];
                this.columnSHSTM_ITEMTYPE = base.Columns["SHSTM_ITEMTYPE"];
                this.columnCSHSTM_ITEMTYPE = base.Columns["CSHSTM_ITEMTYPE"];
                this.columnLNSTM_ITEMTYPE = base.Columns["LNSTM_ITEMTYPE"];
                this.columnCLNSTM_ITEMTYPE = base.Columns["CLNSTM_ITEMTYPE"];
                this.columnSLIPMANUAL_FLAG = base.Columns["SLIPMANUAL_FLAG"];
                this.columnMONEYTYPE_SUPPORT = base.Columns["MONEYTYPE_SUPPORT"];
                this.columnSHPAY_DESC = base.Columns["SHPAY_DESC"];
                this.columnLNPAY_DESC = base.Columns["LNPAY_DESC"];
                this.columnSLIPTYPE_GROUP = base.Columns["SLIPTYPE_GROUP"];
                this.columnDELITEMNOTOPERATE_FLAG = base.Columns["DELITEMNOTOPERATE_FLAG"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSLIPTYPE_CODE = new global::System.Data.DataColumn("SLIPTYPE_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_CODE);
                this.columnSLIPTYPE_DESC = new global::System.Data.DataColumn("SLIPTYPE_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_DESC);
                this.columnSLIPTYPE_SORT = new global::System.Data.DataColumn("SLIPTYPE_SORT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_SORT);
                this.columnSLIPTYPESIGN_FLAG = new global::System.Data.DataColumn("SLIPTYPESIGN_FLAG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPESIGN_FLAG);
                this.columnSHSTM_ITEMTYPE = new global::System.Data.DataColumn("SHSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHSTM_ITEMTYPE);
                this.columnCSHSTM_ITEMTYPE = new global::System.Data.DataColumn("CSHSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCSHSTM_ITEMTYPE);
                this.columnLNSTM_ITEMTYPE = new global::System.Data.DataColumn("LNSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLNSTM_ITEMTYPE);
                this.columnCLNSTM_ITEMTYPE = new global::System.Data.DataColumn("CLNSTM_ITEMTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLNSTM_ITEMTYPE);
                this.columnSLIPMANUAL_FLAG = new global::System.Data.DataColumn("SLIPMANUAL_FLAG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPMANUAL_FLAG);
                this.columnMONEYTYPE_SUPPORT = new global::System.Data.DataColumn("MONEYTYPE_SUPPORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONEYTYPE_SUPPORT);
                this.columnSHPAY_DESC = new global::System.Data.DataColumn("SHPAY_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHPAY_DESC);
                this.columnLNPAY_DESC = new global::System.Data.DataColumn("LNPAY_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLNPAY_DESC);
                this.columnSLIPTYPE_GROUP = new global::System.Data.DataColumn("SLIPTYPE_GROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSLIPTYPE_GROUP);
                this.columnDELITEMNOTOPERATE_FLAG = new global::System.Data.DataColumn("DELITEMNOTOPERATE_FLAG", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDELITEMNOTOPERATE_FLAG);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSLIPTYPE_CODE}, true));
                this.columnSLIPTYPE_CODE.AllowDBNull = false;
                this.columnSLIPTYPE_CODE.Unique = true;
                this.columnSLIPTYPE_CODE.MaxLength = 3;
                this.columnSLIPTYPE_DESC.MaxLength = 100;
                this.columnSHSTM_ITEMTYPE.MaxLength = 3;
                this.columnCSHSTM_ITEMTYPE.MaxLength = 3;
                this.columnLNSTM_ITEMTYPE.MaxLength = 3;
                this.columnCLNSTM_ITEMTYPE.MaxLength = 3;
                this.columnMONEYTYPE_SUPPORT.MaxLength = 100;
                this.columnSHPAY_DESC.MaxLength = 60;
                this.columnLNPAY_DESC.MaxLength = 60;
                this.columnSLIPTYPE_GROUP.MaxLength = 3;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPERow NewSLUCFSLIPTYPERow() {
                return ((SLUCFSLIPTYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SLUCFSLIPTYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SLUCFSLIPTYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SLUCFSLIPTYPERowChanged != null)) {
                    this.SLUCFSLIPTYPERowChanged(this, new SLUCFSLIPTYPERowChangeEvent(((SLUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SLUCFSLIPTYPERowChanging != null)) {
                    this.SLUCFSLIPTYPERowChanging(this, new SLUCFSLIPTYPERowChangeEvent(((SLUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SLUCFSLIPTYPERowDeleted != null)) {
                    this.SLUCFSLIPTYPERowDeleted(this, new SLUCFSLIPTYPERowChangeEvent(((SLUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SLUCFSLIPTYPERowDeleting != null)) {
                    this.SLUCFSLIPTYPERowDeleting(this, new SLUCFSLIPTYPERowChangeEvent(((SLUCFSLIPTYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSLUCFSLIPTYPERow(SLUCFSLIPTYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SLUCFSLIPTYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class CMUCFSLIPTYPERow : global::System.Data.DataRow {
            
            private CMUCFSLIPTYPEDataTable tableCMUCFSLIPTYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal CMUCFSLIPTYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCMUCFSLIPTYPE = ((CMUCFSLIPTYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SLIPTYPE_CODE {
                get {
                    return ((string)(this[this.tableCMUCFSLIPTYPE.SLIPTYPE_CODEColumn]));
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.SLIPTYPE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SLIPTYPE_DESC {
                get {
                    try {
                        return ((string)(this[this.tableCMUCFSLIPTYPE.SLIPTYPE_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPE_DESC\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.SLIPTYPE_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SLIPTYPE_SORT {
                get {
                    try {
                        return ((decimal)(this[this.tableCMUCFSLIPTYPE.SLIPTYPE_SORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPE_SORT\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.SLIPTYPE_SORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SLIPTYPE_FLAG {
                get {
                    try {
                        return ((decimal)(this[this.tableCMUCFSLIPTYPE.SLIPTYPE_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPE_FLAG\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.SLIPTYPE_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableCMUCFSLIPTYPE.SHSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHSTM_ITEMTYPE\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.SHSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CSHSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableCMUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CSHSTM_ITEMTYPE\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LNSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableCMUCFSLIPTYPE.LNSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LNSTM_ITEMTYPE\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.LNSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CLNSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableCMUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLNSTM_ITEMTYPE\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MONEYTYPE_SUPPORT {
                get {
                    try {
                        return ((string)(this[this.tableCMUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MONEYTYPE_SUPPORT\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SLIPMANUAL_FLAG {
                get {
                    try {
                        return ((decimal)(this[this.tableCMUCFSLIPTYPE.SLIPMANUAL_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPMANUAL_FLAG\' in table \'CMUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCMUCFSLIPTYPE.SLIPMANUAL_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPE_DESCNull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.SLIPTYPE_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPE_DESCNull() {
                this[this.tableCMUCFSLIPTYPE.SLIPTYPE_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPE_SORTNull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.SLIPTYPE_SORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPE_SORTNull() {
                this[this.tableCMUCFSLIPTYPE.SLIPTYPE_SORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPE_FLAGNull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.SLIPTYPE_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPE_FLAGNull() {
                this[this.tableCMUCFSLIPTYPE.SLIPTYPE_FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHSTM_ITEMTYPENull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.SHSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHSTM_ITEMTYPENull() {
                this[this.tableCMUCFSLIPTYPE.SHSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCSHSTM_ITEMTYPENull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCSHSTM_ITEMTYPENull() {
                this[this.tableCMUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLNSTM_ITEMTYPENull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.LNSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLNSTM_ITEMTYPENull() {
                this[this.tableCMUCFSLIPTYPE.LNSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCLNSTM_ITEMTYPENull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCLNSTM_ITEMTYPENull() {
                this[this.tableCMUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMONEYTYPE_SUPPORTNull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMONEYTYPE_SUPPORTNull() {
                this[this.tableCMUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPMANUAL_FLAGNull() {
                return this.IsNull(this.tableCMUCFSLIPTYPE.SLIPMANUAL_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPMANUAL_FLAGNull() {
                this[this.tableCMUCFSLIPTYPE.SLIPMANUAL_FLAGColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SLUCFSLIPTYPERow : global::System.Data.DataRow {
            
            private SLUCFSLIPTYPEDataTable tableSLUCFSLIPTYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SLUCFSLIPTYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSLUCFSLIPTYPE = ((SLUCFSLIPTYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SLIPTYPE_CODE {
                get {
                    return ((string)(this[this.tableSLUCFSLIPTYPE.SLIPTYPE_CODEColumn]));
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SLIPTYPE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SLIPTYPE_DESC {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.SLIPTYPE_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPE_DESC\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SLIPTYPE_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SLIPTYPE_SORT {
                get {
                    try {
                        return ((decimal)(this[this.tableSLUCFSLIPTYPE.SLIPTYPE_SORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPE_SORT\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SLIPTYPE_SORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SLIPTYPESIGN_FLAG {
                get {
                    try {
                        return ((decimal)(this[this.tableSLUCFSLIPTYPE.SLIPTYPESIGN_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPESIGN_FLAG\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SLIPTYPESIGN_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.SHSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHSTM_ITEMTYPE\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SHSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CSHSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CSHSTM_ITEMTYPE\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LNSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.LNSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LNSTM_ITEMTYPE\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.LNSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CLNSTM_ITEMTYPE {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLNSTM_ITEMTYPE\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal SLIPMANUAL_FLAG {
                get {
                    try {
                        return ((decimal)(this[this.tableSLUCFSLIPTYPE.SLIPMANUAL_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPMANUAL_FLAG\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SLIPMANUAL_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MONEYTYPE_SUPPORT {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MONEYTYPE_SUPPORT\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHPAY_DESC {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.SHPAY_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHPAY_DESC\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SHPAY_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LNPAY_DESC {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.LNPAY_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LNPAY_DESC\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.LNPAY_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SLIPTYPE_GROUP {
                get {
                    try {
                        return ((string)(this[this.tableSLUCFSLIPTYPE.SLIPTYPE_GROUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SLIPTYPE_GROUP\' in table \'SLUCFSLIPTYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.SLIPTYPE_GROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DELITEMNOTOPERATE_FLAG {
                get {
                    try {
                        return ((decimal)(this[this.tableSLUCFSLIPTYPE.DELITEMNOTOPERATE_FLAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DELITEMNOTOPERATE_FLAG\' in table \'SLUCFSLIPTYPE\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSLUCFSLIPTYPE.DELITEMNOTOPERATE_FLAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPE_DESCNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SLIPTYPE_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPE_DESCNull() {
                this[this.tableSLUCFSLIPTYPE.SLIPTYPE_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPE_SORTNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SLIPTYPE_SORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPE_SORTNull() {
                this[this.tableSLUCFSLIPTYPE.SLIPTYPE_SORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPESIGN_FLAGNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SLIPTYPESIGN_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPESIGN_FLAGNull() {
                this[this.tableSLUCFSLIPTYPE.SLIPTYPESIGN_FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHSTM_ITEMTYPENull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SHSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHSTM_ITEMTYPENull() {
                this[this.tableSLUCFSLIPTYPE.SHSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCSHSTM_ITEMTYPENull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCSHSTM_ITEMTYPENull() {
                this[this.tableSLUCFSLIPTYPE.CSHSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLNSTM_ITEMTYPENull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.LNSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLNSTM_ITEMTYPENull() {
                this[this.tableSLUCFSLIPTYPE.LNSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCLNSTM_ITEMTYPENull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCLNSTM_ITEMTYPENull() {
                this[this.tableSLUCFSLIPTYPE.CLNSTM_ITEMTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPMANUAL_FLAGNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SLIPMANUAL_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPMANUAL_FLAGNull() {
                this[this.tableSLUCFSLIPTYPE.SLIPMANUAL_FLAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMONEYTYPE_SUPPORTNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMONEYTYPE_SUPPORTNull() {
                this[this.tableSLUCFSLIPTYPE.MONEYTYPE_SUPPORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHPAY_DESCNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SHPAY_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHPAY_DESCNull() {
                this[this.tableSLUCFSLIPTYPE.SHPAY_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLNPAY_DESCNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.LNPAY_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLNPAY_DESCNull() {
                this[this.tableSLUCFSLIPTYPE.LNPAY_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSLIPTYPE_GROUPNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.SLIPTYPE_GROUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSLIPTYPE_GROUPNull() {
                this[this.tableSLUCFSLIPTYPE.SLIPTYPE_GROUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDELITEMNOTOPERATE_FLAGNull() {
                return this.IsNull(this.tableSLUCFSLIPTYPE.DELITEMNOTOPERATE_FLAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDELITEMNOTOPERATE_FLAGNull() {
                this[this.tableSLUCFSLIPTYPE.DELITEMNOTOPERATE_FLAGColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class CMUCFSLIPTYPERowChangeEvent : global::System.EventArgs {
            
            private CMUCFSLIPTYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPERowChangeEvent(CMUCFSLIPTYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public CMUCFSLIPTYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SLUCFSLIPTYPERowChangeEvent : global::System.EventArgs {
            
            private SLUCFSLIPTYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPERowChangeEvent(SLUCFSLIPTYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SLUCFSLIPTYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Saving.Applications.shrlon_const.w_sheet_sl_const_cmucfsliptype_ctrl.DataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CMUCFSLIPTYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public CMUCFSLIPTYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CMUCFSLIPTYPE";
            tableMapping.ColumnMappings.Add("SLIPTYPE_CODE", "SLIPTYPE_CODE");
            tableMapping.ColumnMappings.Add("SLIPTYPE_DESC", "SLIPTYPE_DESC");
            tableMapping.ColumnMappings.Add("SLIPTYPE_SORT", "SLIPTYPE_SORT");
            tableMapping.ColumnMappings.Add("SLIPTYPE_FLAG", "SLIPTYPE_FLAG");
            tableMapping.ColumnMappings.Add("SHSTM_ITEMTYPE", "SHSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("CSHSTM_ITEMTYPE", "CSHSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("LNSTM_ITEMTYPE", "LNSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("CLNSTM_ITEMTYPE", "CLNSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("MONEYTYPE_SUPPORT", "MONEYTYPE_SUPPORT");
            tableMapping.ColumnMappings.Add("SLIPMANUAL_FLAG", "SLIPMANUAL_FLAG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"CMUCFSLIPTYPE\" WHERE ((\"SLIPTYPE_CODE\" = :Original_SLIPTYPE_CODE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""CMUCFSLIPTYPE"" (""SLIPTYPE_CODE"", ""SLIPTYPE_DESC"", ""SLIPTYPE_SORT"", ""SLIPTYPE_FLAG"", ""SHSTM_ITEMTYPE"", ""CSHSTM_ITEMTYPE"", ""LNSTM_ITEMTYPE"", ""CLNSTM_ITEMTYPE"", ""MONEYTYPE_SUPPORT"", ""SLIPMANUAL_FLAG"") VALUES (:SLIPTYPE_CODE, :SLIPTYPE_DESC, :SLIPTYPE_SORT, :SLIPTYPE_FLAG, :SHSTM_ITEMTYPE, :CSHSTM_ITEMTYPE, :LNSTM_ITEMTYPE, :CLNSTM_ITEMTYPE, :MONEYTYPE_SUPPORT, :SLIPMANUAL_FLAG)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_SORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CSHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CSHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "LNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CLNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MONEYTYPE_SUPPORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MONEYTYPE_SUPPORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPMANUAL_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPMANUAL_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""CMUCFSLIPTYPE"" SET ""SLIPTYPE_CODE"" = :SLIPTYPE_CODE, ""SLIPTYPE_DESC"" = :SLIPTYPE_DESC, ""SLIPTYPE_SORT"" = :SLIPTYPE_SORT, ""SLIPTYPE_FLAG"" = :SLIPTYPE_FLAG, ""SHSTM_ITEMTYPE"" = :SHSTM_ITEMTYPE, ""CSHSTM_ITEMTYPE"" = :CSHSTM_ITEMTYPE, ""LNSTM_ITEMTYPE"" = :LNSTM_ITEMTYPE, ""CLNSTM_ITEMTYPE"" = :CLNSTM_ITEMTYPE, ""MONEYTYPE_SUPPORT"" = :MONEYTYPE_SUPPORT, ""SLIPMANUAL_FLAG"" = :SLIPMANUAL_FLAG WHERE ((""SLIPTYPE_CODE"" = :Original_SLIPTYPE_CODE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_SORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CSHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CSHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "LNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CLNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MONEYTYPE_SUPPORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MONEYTYPE_SUPPORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPMANUAL_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPMANUAL_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ""CMUCFSLIPTYPE"".""SLIPTYPE_CODE"",   
         ""CMUCFSLIPTYPE"".""SLIPTYPE_DESC"",   
         ""CMUCFSLIPTYPE"".""SLIPTYPE_SORT"",   
         ""CMUCFSLIPTYPE"".""SLIPTYPE_FLAG"",   
         ""CMUCFSLIPTYPE"".""SHSTM_ITEMTYPE"",   
         ""CMUCFSLIPTYPE"".""CSHSTM_ITEMTYPE"",   
         ""CMUCFSLIPTYPE"".""LNSTM_ITEMTYPE"",   
         ""CMUCFSLIPTYPE"".""CLNSTM_ITEMTYPE"",   
         ""CMUCFSLIPTYPE"".""MONEYTYPE_SUPPORT"",   
         ""CMUCFSLIPTYPE"".""SLIPMANUAL_FLAG""  
    FROM ""CMUCFSLIPTYPE""   ";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.CMUCFSLIPTYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.CMUCFSLIPTYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.CMUCFSLIPTYPEDataTable dataTable = new DataSet1.CMUCFSLIPTYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.CMUCFSLIPTYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "CMUCFSLIPTYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SLIPTYPE_CODE) {
            if ((Original_SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("Original_SLIPTYPE_CODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SLIPTYPE_CODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SLIPTYPE_CODE, string SLIPTYPE_DESC, global::System.Nullable<decimal> SLIPTYPE_SORT, global::System.Nullable<decimal> SLIPTYPE_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, string MONEYTYPE_SUPPORT, global::System.Nullable<decimal> SLIPMANUAL_FLAG) {
            if ((SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("SLIPTYPE_CODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SLIPTYPE_CODE));
            }
            if ((SLIPTYPE_DESC == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SLIPTYPE_DESC));
            }
            if ((SLIPTYPE_SORT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(SLIPTYPE_SORT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SLIPTYPE_FLAG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(SLIPTYPE_FLAG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SHSTM_ITEMTYPE));
            }
            if ((CSHSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CSHSTM_ITEMTYPE));
            }
            if ((LNSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(LNSTM_ITEMTYPE));
            }
            if ((CLNSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CLNSTM_ITEMTYPE));
            }
            if ((MONEYTYPE_SUPPORT == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MONEYTYPE_SUPPORT));
            }
            if ((SLIPMANUAL_FLAG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(SLIPMANUAL_FLAG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SLIPTYPE_CODE, string SLIPTYPE_DESC, global::System.Nullable<decimal> SLIPTYPE_SORT, global::System.Nullable<decimal> SLIPTYPE_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, string MONEYTYPE_SUPPORT, global::System.Nullable<decimal> SLIPMANUAL_FLAG, string Original_SLIPTYPE_CODE) {
            if ((SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("SLIPTYPE_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SLIPTYPE_CODE));
            }
            if ((SLIPTYPE_DESC == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SLIPTYPE_DESC));
            }
            if ((SLIPTYPE_SORT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(SLIPTYPE_SORT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SLIPTYPE_FLAG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(SLIPTYPE_FLAG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SHSTM_ITEMTYPE));
            }
            if ((CSHSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CSHSTM_ITEMTYPE));
            }
            if ((LNSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(LNSTM_ITEMTYPE));
            }
            if ((CLNSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CLNSTM_ITEMTYPE));
            }
            if ((MONEYTYPE_SUPPORT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(MONEYTYPE_SUPPORT));
            }
            if ((SLIPMANUAL_FLAG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(SLIPMANUAL_FLAG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("Original_SLIPTYPE_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_SLIPTYPE_CODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SLIPTYPE_DESC, global::System.Nullable<decimal> SLIPTYPE_SORT, global::System.Nullable<decimal> SLIPTYPE_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, string MONEYTYPE_SUPPORT, global::System.Nullable<decimal> SLIPMANUAL_FLAG, string Original_SLIPTYPE_CODE) {
            return this.Update(Original_SLIPTYPE_CODE, SLIPTYPE_DESC, SLIPTYPE_SORT, SLIPTYPE_FLAG, SHSTM_ITEMTYPE, CSHSTM_ITEMTYPE, LNSTM_ITEMTYPE, CLNSTM_ITEMTYPE, MONEYTYPE_SUPPORT, SLIPMANUAL_FLAG, Original_SLIPTYPE_CODE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SLUCFSLIPTYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleTransaction _transaction;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SLUCFSLIPTYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.OracleClient.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SLUCFSLIPTYPE";
            tableMapping.ColumnMappings.Add("SLIPTYPE_CODE", "SLIPTYPE_CODE");
            tableMapping.ColumnMappings.Add("SLIPTYPE_DESC", "SLIPTYPE_DESC");
            tableMapping.ColumnMappings.Add("SLIPTYPE_SORT", "SLIPTYPE_SORT");
            tableMapping.ColumnMappings.Add("SLIPTYPESIGN_FLAG", "SLIPTYPESIGN_FLAG");
            tableMapping.ColumnMappings.Add("SHSTM_ITEMTYPE", "SHSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("CSHSTM_ITEMTYPE", "CSHSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("LNSTM_ITEMTYPE", "LNSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("CLNSTM_ITEMTYPE", "CLNSTM_ITEMTYPE");
            tableMapping.ColumnMappings.Add("SLIPMANUAL_FLAG", "SLIPMANUAL_FLAG");
            tableMapping.ColumnMappings.Add("MONEYTYPE_SUPPORT", "MONEYTYPE_SUPPORT");
            tableMapping.ColumnMappings.Add("SHPAY_DESC", "SHPAY_DESC");
            tableMapping.ColumnMappings.Add("LNPAY_DESC", "LNPAY_DESC");
            tableMapping.ColumnMappings.Add("SLIPTYPE_GROUP", "SLIPTYPE_GROUP");
            tableMapping.ColumnMappings.Add("DELITEMNOTOPERATE_FLAG", "DELITEMNOTOPERATE_FLAG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SLUCFSLIPTYPE\" WHERE ((\"SLIPTYPE_CODE\" = :Original_SLIPTYPE_CODE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""SLUCFSLIPTYPE"" (""SLIPTYPE_CODE"", ""SLIPTYPE_DESC"", ""SLIPTYPE_SORT"", ""SLIPTYPESIGN_FLAG"", ""SHSTM_ITEMTYPE"", ""CSHSTM_ITEMTYPE"", ""LNSTM_ITEMTYPE"", ""CLNSTM_ITEMTYPE"", ""SLIPMANUAL_FLAG"", ""MONEYTYPE_SUPPORT"", ""SHPAY_DESC"", ""LNPAY_DESC"", ""SLIPTYPE_GROUP"", ""DELITEMNOTOPERATE_FLAG"") VALUES (:SLIPTYPE_CODE, :SLIPTYPE_DESC, :SLIPTYPE_SORT, :SLIPTYPESIGN_FLAG, :SHSTM_ITEMTYPE, :CSHSTM_ITEMTYPE, :LNSTM_ITEMTYPE, :CLNSTM_ITEMTYPE, :SLIPMANUAL_FLAG, :MONEYTYPE_SUPPORT, :SHPAY_DESC, :LNPAY_DESC, :SLIPTYPE_GROUP, :p1)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_SORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPESIGN_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPESIGN_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CSHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CSHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "LNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CLNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPMANUAL_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPMANUAL_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MONEYTYPE_SUPPORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MONEYTYPE_SUPPORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SHPAY_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SHPAY_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LNPAY_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LNPAY_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_GROUP", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_GROUP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("p1", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DELITEMNOTOPERATE_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SLUCFSLIPTYPE"" SET ""SLIPTYPE_CODE"" = :SLIPTYPE_CODE, ""SLIPTYPE_DESC"" = :SLIPTYPE_DESC, ""SLIPTYPE_SORT"" = :SLIPTYPE_SORT, ""SLIPTYPESIGN_FLAG"" = :SLIPTYPESIGN_FLAG, ""SHSTM_ITEMTYPE"" = :SHSTM_ITEMTYPE, ""CSHSTM_ITEMTYPE"" = :CSHSTM_ITEMTYPE, ""LNSTM_ITEMTYPE"" = :LNSTM_ITEMTYPE, ""CLNSTM_ITEMTYPE"" = :CLNSTM_ITEMTYPE, ""SLIPMANUAL_FLAG"" = :SLIPMANUAL_FLAG, ""MONEYTYPE_SUPPORT"" = :MONEYTYPE_SUPPORT, ""SHPAY_DESC"" = :SHPAY_DESC, ""LNPAY_DESC"" = :LNPAY_DESC, ""SLIPTYPE_GROUP"" = :SLIPTYPE_GROUP, ""DELITEMNOTOPERATE_FLAG"" = :p1 WHERE ((""SLIPTYPE_CODE"" = :Original_SLIPTYPE_CODE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_SORT", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_SORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPESIGN_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPESIGN_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CSHSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CSHSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "LNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CLNSTM_ITEMTYPE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "CLNSTM_ITEMTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPMANUAL_FLAG", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "SLIPMANUAL_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MONEYTYPE_SUPPORT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MONEYTYPE_SUPPORT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SHPAY_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SHPAY_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LNPAY_DESC", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LNPAY_DESC", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SLIPTYPE_GROUP", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_GROUP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("p1", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "DELITEMNOTOPERATE_FLAG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_SLIPTYPE_CODE", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "SLIPTYPE_CODE", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select * from slucfsliptype";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SLUCFSLIPTYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SLUCFSLIPTYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SLUCFSLIPTYPEDataTable dataTable = new DataSet1.SLUCFSLIPTYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SLUCFSLIPTYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "SLUCFSLIPTYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_SLIPTYPE_CODE) {
            if ((Original_SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("Original_SLIPTYPE_CODE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_SLIPTYPE_CODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string SLIPTYPE_CODE, string SLIPTYPE_DESC, global::System.Nullable<decimal> SLIPTYPE_SORT, global::System.Nullable<decimal> SLIPTYPESIGN_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, global::System.Nullable<decimal> SLIPMANUAL_FLAG, string MONEYTYPE_SUPPORT, string SHPAY_DESC, string LNPAY_DESC, string SLIPTYPE_GROUP, global::System.Nullable<decimal> p1) {
            if ((SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("SLIPTYPE_CODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(SLIPTYPE_CODE));
            }
            if ((SLIPTYPE_DESC == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SLIPTYPE_DESC));
            }
            if ((SLIPTYPE_SORT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(SLIPTYPE_SORT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SLIPTYPESIGN_FLAG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(SLIPTYPESIGN_FLAG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SHSTM_ITEMTYPE));
            }
            if ((CSHSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CSHSTM_ITEMTYPE));
            }
            if ((LNSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(LNSTM_ITEMTYPE));
            }
            if ((CLNSTM_ITEMTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CLNSTM_ITEMTYPE));
            }
            if ((SLIPMANUAL_FLAG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(SLIPMANUAL_FLAG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MONEYTYPE_SUPPORT == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(MONEYTYPE_SUPPORT));
            }
            if ((SHPAY_DESC == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(SHPAY_DESC));
            }
            if ((LNPAY_DESC == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(LNPAY_DESC));
            }
            if ((SLIPTYPE_GROUP == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(SLIPTYPE_GROUP));
            }
            if ((p1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(p1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SLIPTYPE_CODE, string SLIPTYPE_DESC, global::System.Nullable<decimal> SLIPTYPE_SORT, global::System.Nullable<decimal> SLIPTYPESIGN_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, global::System.Nullable<decimal> SLIPMANUAL_FLAG, string MONEYTYPE_SUPPORT, string SHPAY_DESC, string LNPAY_DESC, string SLIPTYPE_GROUP, global::System.Nullable<decimal> p1, string Original_SLIPTYPE_CODE) {
            if ((SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("SLIPTYPE_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(SLIPTYPE_CODE));
            }
            if ((SLIPTYPE_DESC == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SLIPTYPE_DESC));
            }
            if ((SLIPTYPE_SORT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(SLIPTYPE_SORT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SLIPTYPESIGN_FLAG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(SLIPTYPESIGN_FLAG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SHSTM_ITEMTYPE));
            }
            if ((CSHSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CSHSTM_ITEMTYPE));
            }
            if ((LNSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(LNSTM_ITEMTYPE));
            }
            if ((CLNSTM_ITEMTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CLNSTM_ITEMTYPE));
            }
            if ((SLIPMANUAL_FLAG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(SLIPMANUAL_FLAG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MONEYTYPE_SUPPORT == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(MONEYTYPE_SUPPORT));
            }
            if ((SHPAY_DESC == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(SHPAY_DESC));
            }
            if ((LNPAY_DESC == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(LNPAY_DESC));
            }
            if ((SLIPTYPE_GROUP == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(SLIPTYPE_GROUP));
            }
            if ((p1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(p1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_SLIPTYPE_CODE == null)) {
                throw new global::System.ArgumentNullException("Original_SLIPTYPE_CODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_SLIPTYPE_CODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SLIPTYPE_DESC, global::System.Nullable<decimal> SLIPTYPE_SORT, global::System.Nullable<decimal> SLIPTYPESIGN_FLAG, string SHSTM_ITEMTYPE, string CSHSTM_ITEMTYPE, string LNSTM_ITEMTYPE, string CLNSTM_ITEMTYPE, global::System.Nullable<decimal> SLIPMANUAL_FLAG, string MONEYTYPE_SUPPORT, string SHPAY_DESC, string LNPAY_DESC, string SLIPTYPE_GROUP, global::System.Nullable<decimal> p1, string Original_SLIPTYPE_CODE) {
            return this.Update(Original_SLIPTYPE_CODE, SLIPTYPE_DESC, SLIPTYPE_SORT, SLIPTYPESIGN_FLAG, SHSTM_ITEMTYPE, CSHSTM_ITEMTYPE, LNSTM_ITEMTYPE, CLNSTM_ITEMTYPE, SLIPMANUAL_FLAG, MONEYTYPE_SUPPORT, SHPAY_DESC, LNPAY_DESC, SLIPTYPE_GROUP, p1, Original_SLIPTYPE_CODE);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private CMUCFSLIPTYPETableAdapter _cMUCFSLIPTYPETableAdapter;
        
        private SLUCFSLIPTYPETableAdapter _sLUCFSLIPTYPETableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public CMUCFSLIPTYPETableAdapter CMUCFSLIPTYPETableAdapter {
            get {
                return this._cMUCFSLIPTYPETableAdapter;
            }
            set {
                this._cMUCFSLIPTYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SLUCFSLIPTYPETableAdapter SLUCFSLIPTYPETableAdapter {
            get {
                return this._sLUCFSLIPTYPETableAdapter;
            }
            set {
                this._sLUCFSLIPTYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._cMUCFSLIPTYPETableAdapter != null) 
                            && (this._cMUCFSLIPTYPETableAdapter.Connection != null))) {
                    return this._cMUCFSLIPTYPETableAdapter.Connection;
                }
                if (((this._sLUCFSLIPTYPETableAdapter != null) 
                            && (this._sLUCFSLIPTYPETableAdapter.Connection != null))) {
                    return this._sLUCFSLIPTYPETableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._cMUCFSLIPTYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sLUCFSLIPTYPETableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cMUCFSLIPTYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CMUCFSLIPTYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cMUCFSLIPTYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sLUCFSLIPTYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SLUCFSLIPTYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sLUCFSLIPTYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cMUCFSLIPTYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CMUCFSLIPTYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cMUCFSLIPTYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sLUCFSLIPTYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SLUCFSLIPTYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sLUCFSLIPTYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(DataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._sLUCFSLIPTYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SLUCFSLIPTYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sLUCFSLIPTYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cMUCFSLIPTYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CMUCFSLIPTYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cMUCFSLIPTYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(DataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._cMUCFSLIPTYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cMUCFSLIPTYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sLUCFSLIPTYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sLUCFSLIPTYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._cMUCFSLIPTYPETableAdapter != null)) {
                    revertConnections.Add(this._cMUCFSLIPTYPETableAdapter, this._cMUCFSLIPTYPETableAdapter.Connection);
                    this._cMUCFSLIPTYPETableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._cMUCFSLIPTYPETableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._cMUCFSLIPTYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cMUCFSLIPTYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cMUCFSLIPTYPETableAdapter.Adapter);
                    }
                }
                if ((this._sLUCFSLIPTYPETableAdapter != null)) {
                    revertConnections.Add(this._sLUCFSLIPTYPETableAdapter, this._sLUCFSLIPTYPETableAdapter.Connection);
                    this._sLUCFSLIPTYPETableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(workConnection));
                    this._sLUCFSLIPTYPETableAdapter.Transaction = ((global::System.Data.OracleClient.OracleTransaction)(workTransaction));
                    if (this._sLUCFSLIPTYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sLUCFSLIPTYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sLUCFSLIPTYPETableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._cMUCFSLIPTYPETableAdapter != null)) {
                    this._cMUCFSLIPTYPETableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._cMUCFSLIPTYPETableAdapter]));
                    this._cMUCFSLIPTYPETableAdapter.Transaction = null;
                }
                if ((this._sLUCFSLIPTYPETableAdapter != null)) {
                    this._sLUCFSLIPTYPETableAdapter.Connection = ((global::System.Data.OracleClient.OracleConnection)(revertConnections[this._sLUCFSLIPTYPETableAdapter]));
                    this._sLUCFSLIPTYPETableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591